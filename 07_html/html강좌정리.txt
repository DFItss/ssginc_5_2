html5 강좌정리

1. web 아키텍쳐(web architecture)

  
   클라이언트(client):부산                        서버(server):서울 예>쿠팡
  ---------                                   ---------------------
   웹브라우저                                    웹컴포넌트(html,jsp,servlet)
                                               html: 정적 컴포넌트, *.html 파일
					       jsp:  동적 컴포넌트(실행됨), *.jsp 파일, 자바기술
					       servlet: 동적 컴포넌트(실행됨), *.java 파일, 자바기술
					                       
    
    *html인 경우

               1)요청               서버(웹서버: Apache, IIS, ngnix, live server )
    웹브라우저   ----------------->   test.html   2) 요청한 html검색( 없으면 404(File Not found) 에러발생)
               <------------------
	        3) test.html 다운
  4) test.html
    랜더링함.
   
   * jsp인 경우

              1)요청               서버 ( 웹서버기능을 포함한 컨테이너: Tomcat )
    웹브라우저   ----------------->   test.jsp   2) 요청한 jsp검색( 없으면 404 에러발생)
                                      3) 있으면 test_jsp.java 생성
	                              4) 컴파일 test_jsp.class 생성
                                      5) 실행 ( JVM )
				        ==> 실행결과는 html로 만들어짐
	     <------------------
	      6) html 응답
    7)html랜더링함.
  
  * servlet 인 경우

              1)요청               서버 ( 웹서버기능을 포함한 컨테이너: Tomcat )
    웹브라우저   ----------------->   TestServlet.java   2) 요청한 java검색( 없으면 404 에러발생)
                                      
	                              3) 컴파일 class 생성
                                      4) 실행( JVM )
				        ==> 실행결과는 html로 만들어짐
	     <------------------
	      5) html 응답
    6)html랜더링함.


2.  요청 URL
 
 - 필요한 정보
  1) 서버의 IP 정보: 210.100.100.3
  2) port 번호: 8080
  3) 타겟 컴포넌트
                     https://
           요청 URL:  http://서버IP:port번호/타겟
	             http://서버IP:port번호/폴더/타겟  
                     http://210.100.100.3:8080/test.html
           ---------------------------->
 클라이언트                                  서버쪽 PC (210.100.100.3)
---------                                --------
                                          Apache웹서버(80)
					  ..
					  tomcat 컨테이너(8080)
					     - html ( test.html, hello.html,..)
					     - jsp
					     - Servlet
					  ..
					  MySQL(3306)
					  ..
					  Oracle(1521)


3. 환경설정

  1) node 설정
    https://nodejs.org/ 다운받고 설치(기본설치)

    cmd창에서 node -v 입력하고 버전 확인.

  2) VSC 설정
     - https://code.visualstudio.com/ 다운받고 설치(기본설치)
     - VSC 확장팩 설치


  3) 워크스페이스 작성

4. 웹(web) 개요

  - 1991년에  World Wide Web(WWW) 용어가 처음 나옴.
  - 1993년에 웹 표준단체 창설 ( W3C )
     http://www.w3.org

     html표준
     css표준        -------------------> 웹브라우저실행( 구글, MS, Firefox,...)
     js표준
   (java의 인터페이스) -------------------> (인터페이스 구현한 클래스)

  - 모질라(Mozilla)는 가장 빠르게 표준 준수해서 가이드 제공.
    http://developer.mozilla.org
    http://caniuse.com
    html 표준 가이드 : https://developer.mozilla.org/ko/docs/Web/HTML
    css 표준 가이드:   https://developer.mozilla.org/ko/docs/Web/CSS
    js 표준 가이드:    https://developer.mozilla.org/ko/docs/Web/JavaScript

   ==> 모든 브라우저가 제안된 표준안을 준수하지 못함.(***********)

5. 웹 표준

  - 기본개념: 
   특정 기기와 상관없이 누구든지 정보 접근이 가능한 웹을 만들어야 된다.
   ( 시각장애인일지라도 )
   https://validator.w3.org/

  - 구현방법1
    역할 분담

    1) html
       - 데이터 구조 ( 뼈대 ) 담당
       - *.html
    2) css
       - 디자인과 레이아웃 담당
       - *.css
    3) javascript
       - 동적처리 담당
       - *.js

   ==> 모두 서버쪽에 저장되지만 실행은 웹브라우저인 클라이언트에서 실행됨. (**************)

6. html 개요
 
  - hyper text markup language 의 약자로서 웹페이지 작성을 위한 언어.

  hyper text 의미: 링크 의미
  markup language 의미: 정보표시용 태그(<>) 의미, 태그명은 정해져 있음.

  - xml (eXtensible Markup Language)
   ==> 태그명을 임의로 지정 가능.
       추가로 특정태그로 사용함을 규칙으로 정할수도 있음.
       규칙은 2가지 방식 이용 가능 ( *.dtd , *.xsd )
   ==> 용도: 데이터 저장

      예> 홍길동, 20
        
	 <person>
           <name>홍길동</name>
           <age>20</age>
	 </person>

    ==> 특징: 플랫폼(OS,프로그램언어)에 독립적
    ==> 단점: 데이터를 표현하기 위한 메타데이터(meta data)가 필요하게됨.
             해결하기 위한 방법으로 JSON (JavaScript Object Notation)을 사용함.

7. html 특징
 
   - 태그로 구성
   - 시작태그와 종료태그 그리고 몸체(body)인 3가지로 구성됨.
     중첩형태로 구성됨.
    예>
        <html>몸체</html>

     몸체? 값 또는 다른 태그가 가능하다.

         <html>
           <body>
              <p>hello</p>
	   </body>
	 </html>

    - 몸체없는 빈태그(empty) 가능
      예> <태그></태그>  ==> <태그 />

    - 종료태그가 없는 태그 가능
       예> <br>, <hr>, <img>, <input>, <link>

    - 소문자 권장
    - 시작태그에는 속성을 포함할 수 있다. 속성명은 정해져 있음.
     문법: <시작태그  속성명="속성값"   속성명="속성값">

     예> 
        <p>hello1</p>
	<p class="x" id="y" >hello2</p>
         
     속성명은 정해져 있으나 커스텀 속성 가능함.
     커스텀 속성 문법:  data-속성명="속성값"

     <p class="x" id="y" data-ssg="z" >hello2</p>

      모든 시작태그에 범용적으로 사용할 수 있는 속성(class, id, style, name등 )이 있고
      태그에 종속적인 속성(예> <a href=""></a> ) 도 있다.


8. html 버전
 
 - html5 사용예정
 - 웹브라우저에 html 버전을 반드시 알려줘야된다.
   DOCTYPE 이용해서 버전정보를 알려준다.

   문법: html5 doctype 문법
   
      <!DOCTYPE html>

9. html 기본구조

    <!DOCTYPE html>
    <html>
      <head>

      </head>
      <body>


      </body>
    </html>

 ==> 계층구조가 생김. 
    아래 구조를 DOM(Document Object Model) 트리라고 부름(****************)

                 html (루트태그:root tag)
	          |
	 head          body
	  |                 |
  title link script     p h1  span  p
                        |
                       "hello"
  
   html 파일을 다운받아서 웹브라우저가 브라우저 메모리에 DOM 트리를 생성한다.
   그리고 랜더링한다.
  나중에 CSS 또는 JS 이용해서 DOM을 접근하여 스타일 및 DOM 처리(삭제,수정,추가등)를 할 수 있음.(***********)

10. html 주석문
   
    <!--     
      <p>Hello</p>
    -->

11. live server

   http://127.0.0.1:5500/template.html

   http: 프로토콜(protocol)

   서버IP: 127.0.0.1 (로컬 의미)
          localhost

   port번호: 5500

   target컴포넌트: template.html

12. <head>태그의 몸체

 1) <title>태그
     - 문서의 타이틀 지정용도
     - 웹브라우저의 탭에 보임
     - 즐겨찾기 추가할 때 저장됨
 
  2) <style>태그
     - css 설정 방법 3가지 중에서 내부 css 스타일 정보 지정용.

      *  css 설정 방법 3가지
       가. 인라인 CSS 스타일
          - 시작태그의 style속성에 css를 적용하는 방법
	  예>  <p style="color:red">Hello1-인라인스타일</p>
          - 권장안함

       나. 내부 CSS 스타일
          - <style>태그에서 css적용할 html태그를 선택해서 적용하는 방법.
	   예>    <head>
		    <title>style</title>
		    <style>
		      #xxx{
			color:blue;
		      }
		    </style>
		  </head>

	          <p id="xxx">Hello2-내부스타일</p>

       다. 외부 CSS 스타일
           - *.css 가진 외부파일로 스타일 생성하고
	      html에서 불러다가 사용함.
	   -    <link rel="stylesheet" href="external.css">
        
  3) <link> 태그
    - 외부 CSS 스타일 지정시 사용
    - favicon 경로지정시 사용

  4) <script> 태그
    - 자바스크립트 사용
    - <body>태그안에서도 사용 가능
    *  JS 설정 방법 2가지
    
      가. 내부 
         - <script>
              js코드 구현
	   </script>

      나. 외부
         - <script src="*.js"></script> 사용

         - 외부파일인 *.js 만들고 
	   html에서 불러다가 사용.
     


13. <body>태그의 몸체

===> 모든 태그는 box로 되어 있음.

  1) header 태그
    - <h1> 부터 <h6> 까지
    - 번호가 작을수록 크게 보임
    - 기본폰트크기는 16px ( 1rem ) ==> 1rem = 1em 동일
   
     <h1> :32px, 16* 2rem(2em)
     <h2> :24px, 16 * 1.5rem(2m)

     <h6> : 10.72px, 16*0.67rem(em)

    - 블럭 레벨 (block level) 스타일 따름

   * 블럭 레벨 (블럭 스타일) vs  인라인 레벨 ( 인라인 스타일 )

      가. 블럭 레벨
         -  새로운 줄에 랜더링됨. 
         -  너비(width)가 웹브라우저의 전체너비를 차지하기 때문에
	    이어서 출력되는 태그는 새로운 줄에 랜더링이 된다.
	 - 대표적인 태그:
	     <h1>~<h6>, <p>, <div>, <ul>,<ol>,<li>, <table>,<tr>...
	     
      나. 인라인 레벨
         - 하나의 줄에 랜더링됨.
	 - 너비(width)가 자신이 가진 컨텐츠 크기만큼만 확보함.
         - 대표적인 태그:
	    <span>,<a>,....


    2) p 태그
     - 문서의 문단(paragraph) 지정 목적
     - 블럭 레벨 (block level) 스타일 따름

    3) br 태그
      - new line 만들 때 사용
      - 종료태그 없음.
      - 블럭 레벨 (block level) 스타일 따름

    4) hr 태그
      - 수평선 제공
      - 종료태그 없음.
      - 블럭 레벨 (block level) 스타일 따름
    
     5) 텍스트 포맷용 태그 ( 권장안함. CSS로 처리하는 것을 권장 )
       - <b>hello</b> : 굵은 글자
       - <i>hello</i> : 이탤릭체 글자
       - <small>hello</small> : 작은글자
       - <del>hello</del> : 취소선글자
       - <ins>hello</ins> : 밑줄글자
       - <sub>hello</sub> : 아래글자
       - <sup>hello</sup> : 위글자

      6) a 태그 ( anchor 태그)
        - 페이지간 링크(연결)시 사용됨.
	- 인라인 레벨
	- 기본적으로 방문전(blue), 방문후(purple), 활성화(red,누르고 있을 때) 링크 색상이 달라진다.
	  css로 변경 가능.
	- 종류 2가지

	가. 내부링크
                <a href="target.html#java">target.html내의 java로 바로가기</a> 

	        <a href="#java">java로 바로가기</a>
                <a href="#sql">sql로 바로가기</a>
		<a href="#css">css로 바로가기</a>

                <a id="java">여기서부터 JAVA</a> 

	나. 외부링크
	 문법:
	     <a href="타겟">링크</a>

	  예> <a href="http://www.google.com">구글</a>
	     <a href="login.html">로그인페이지</a>

      - target 속성
       ==> 링크된 문서를 어디에서 보여줄지를 지정.

        target="_self"  ==> 기본값
	target="_blank" ==> 새로운 창(탭)에 문서를 open

      예> <a href="http://www.google.com" target="_blank">구글</a>


       7) table 태그
         
	 가. 기본
          -<table> 시작
          - <tr> : 행태그
	  - <td> : 열태그의 값
	  - <th> : 열태그의 헤더값

	  예>
	      <table>
	         <tr>
                   <th>이름</th>
		   <th>나이</th>
		 </tr>
                 <tr>
                   <td>홍길동</td>
		   <td>20</td>
		 </tr>
                 <tr>
                   <td>이순신</td>
		   <td>30</td>
		 </tr>
	      </table>

          나. 그룹핑 가능 ( 권장함 )

	     -<thead>
	     -<tbody>
	     -<tfoot>

	     예> 
	         제품명  가격
		 A      100
		 B      200
		 총합    300
	         <table>

                   <thead>
                      <tr>
                        <th>제품명</th>
			<th>가격</th>
		      </tr>
		   </thead>

		   <tbody>
                         <tr>
			   <td>A</td>
			   <td>100</td>
			 </tr>
			 <tr>
			   <td>B</td>
			   <td>200</td>
			 </tr>
		   </tbody>

		   <tfoot>
                        <tr>
			   <td>총합</td>
			   <td>300</td>
			 </tr>
		   </tfoot>
		 </table>


14. 경로 지정 ( 매우 중요 )
 
  1) 개념
   외부파일( target.html, external.css, external.js, my.png, my.jpg,...)을
   참조할 때 외부파일의 위치(경로)를 알려주는 방법을 의미.

  2) 경로 지정 방법 2가지

   가. 절대 경로
    - / 로 시작한다.
     기준은 / 이다. http://127.0.0.1:5500/ 와 동일

   예> http://localhost:5500/sample.html 
      http://127.0.0.1:5500/app1/sample.html

    만약 경로를 /app1 로 지정하면 http://127.0.0.1:5500/app1/ 동일하다.

   나. 상대 경로
    -  / 시작안함.
      시작은 . 또는 .. 또는 그냥 타겟파일(target.html, js, css, png 등) 지정함.

    - 기준은 현재 페이지이다. 즉 main2.html 의 경로가 기준이다.

     예> 
     현재 경로:  http://127.0.0.1:5500/app2/main2.html


     타겟 경로: http://127.0.0.1:5500/app1/sample.html

    - .  : 현재 디렉토리 의미
      .. : 부모 디렉토리 의미
