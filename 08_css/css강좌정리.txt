금일 4차수 최종 프로젝트 발표 ( 13:00 ~ 14:30 )

CSS 강좌정리

1. 환경설저

   1) node 설정
    https://nodejs.org/ 다운받고 설치(기본설치)

    cmd창에서 node -v 입력하고 버전 확인.

  2) VSC 설정
     - https://code.visualstudio.com/ 다운받고 설치(기본설치)
     - VSC 확장팩 설치


  3) 워크스페이스 작성

2. CSS 역할 및 버전

  역할: html에 시각적 표현을 지정해서 스타일 관리.

  css1: 1996년
  css2: 1998년
  css3: 현재까지도 개발중. ( 표준화 버전 )


3. CSS 적용 방법 3가지

 1)인라인 스타일 ( inline style )
   - html내의 시작태그에서 style 속성으로 스타일을 지정하는 방법.
    예> <p>Hello1</p>
       <p style="color:red">Hello2</p> 
       <span style="color:red">Hello3</span> 

 2)내부 스타일  ( internal style )
   - html내의 <head>에 <style> 태그이용해서 스타일을 지정하는 방법.
   예>
    # a.html 
     <head>
       <style>
          p, span{
            color:red;

	  }
       </style>
     </head>
     <body>
      <p>Hello2</p>
      <span>Hello3</span>
     </body>
  
   - <style>태그의 css 속성들이 길어질 수 있음.
     다른 html에서 동일한 css일지라도 중복 정의해야 된다.

 3)외부 스타일  ( external style )
   - html외부에  *.css 가진 외부 파일로 작성하고 
     필요한 html에서 불러다가 사용. ( <link> 태그 이용 )
   - 같은 *.css 파일을 사용하는 여러 html 페이지는 맨 처음 요청한 페이지에서
     다운로드 받은 css 파일을 웹브라우저에 저장(캐시메모리)해두고
     다른 페이지에서 재사용한다.

   예>  #main.css
         p, span{
            color:red;

	  }

      # a.html ( b.html )
     <head>
      <link rel="stylesheet" type="text/css" href="main.css" >
     </head>

     <body>
      <p>Hello2</p>
      <span>Hello3</span>
     </body>

  4) 우선순위

    인라인 스타일  > 기본적으로는 내부 스타일 > 외부 스타일 
  

4. CSS (Cascading Style Sheet ) 선수 내용

 1) 캐스캐이딩 (Cascading)

       html
         |
   head     body
             |
	    div
	     |
	     p

  - 개념:
    DOM 트리의 상위요소에서 정의한 스타일이 하위 요소로 전달되는 개념이다. ( 상속개념 )
    하나의 요소에 여러 스타일이 지정될 수 있음을 뜻함.
    이러한 규칙은 충돌을 발생시킴. 해결방법은 명시도(Specificity)를 사용한다.
    하위에서 재정의 가능

 2) 명시도(Specificity)
  
   - 개념:
      선택자(selector)마다 우선순위가 있음.
      즉 나중에  설정했다고 해서 덮어쓰는 것이 아님. (*******************)

   - 기본적인  CSS 명시도 우선순위 ( 외우기 )

      인라인스타일 > id > css의 class, 속성  > 태그

      예> <a href=""></a>
         <p class="y"></p>
         <span id="x"></span>

    * 다음은 명시도 가중치 표현식이다. ( vsc에서 css선택자 위에서 마우스 오버하면 확인이 가능)
     #id 의 명시도 값: ( 1,0,0 ) ==>  가중치: 100 이라고 생각하자.
     .클래스와 속성의 명시도 값: ( 0,1,0 ) ==> 가중치: 10 이라고 생각하자.
     태그의 명시도 값:  (0,0,1)         ==> 가중치: 1 이라고 생각하자.

   
   - !important
     =>권장안함
     =>기본적인 명시도의 가중치값을 완전히 무시하고 최우선 순위를 가짐.
       ( 인라인 스타일보다 우선권이 더 높음 )

     예> div{
          color:aqua !important;
        }

   - 선택자를 결합해서 구체적으로 지정할 수록 명시도가 올라간다.
     지정된 선택자를 모두 사용하기 때문임.

    명시도 참조사이트:
    https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity



5. CSS 선택자 ( selector )

  * DOM 트리 계층구조

  - 개별적인 요소를 노드(node)라고 부른다.
  - 노드 종류 3가지
    element node: tag 의미
    text node:   리터럴 값 의미
    attribute node: 속성의미
    
    nodelist : 같은 부모의 자식의 모임(배열로 받음)

       html
         |
   head           body
    |               |
  title       div    p    span     a  -   href
  link         |                   |        |
  script      div                 "다음"    "daum.net"
  style        |
               p
	       |
            "hello"

  1) 개념

   - DOM의 요소를 접근(선택)하는 방법.

  2) 문법

    가. 전체선택자
       - *  표현
       - DOM 트리에 있는 모든 태그가 선택됨.
     예>
         <style>
            *{
             color:red;
	    }
	 </sytle>
    
    나. 태그선택자
      - 태그명으로 표현
        만약에 여러개 표현할때는 ,(쉼표) 지정하고 사용.
      예>
         <style>
            p{
             color:red;
	    }
	    p, div, #xx, .yy{
             color:red;
	    }
	 </sytle>

     다. id 속성 선택자
      - #id 표현
      - 중복불가 ( 유일하게 지정한다. )
      예>
         <style>
            #xxx{
             color:red;
	    }
	 </sytle>

        <p id="xxx">Hello</p>

     라. class 속성 선택자
      - .class 표현
      - 중복이 가능
      - 한번에 여러개 지정 가능. 공백으로 구분 ( 예> class="yyy  yyy2")
        독립적으로  적용됨.
	만약 class="xxx  xxx2" 인 경우 나중에 정의된 xxx2가 적용된다.
      예>
         <style>
            .xxx{
             color:red;
	    }
	    .xxx2{
             color:blue;
	    }
	 </sytle>

        <p class="xxx">Hello</p>
        <span class="xxx">Hello</span>

        .. 
        <span class="xxx2">Hello</span>


      - 헷갈릴만한 선택자 표현식 예

        1) <style>
             .select  .aaa{   <== class가 select를 찾고 그 자손으로 class가 aaa인 요소 반환.

	     }
             .select.aaa{   <== class가 select 이면서(그리고 and) class가 aaa인 요소 반환.

	     }
             .select,.aaa{ <== class가 select가 이거나( 또는 or) class가 aaa인 요소 반환.

	     }
	   </style>

     마. 계층구조 1- 자식
      - 부모선택 > 자식 선택
      예>
         #xxx > p{

	 }

     바. 계층구조 2- 자손 ( 공백 )
      - 부모선택  자손 선택 
      - 자식포함.
      예>
         #xxx  p{

	 }

    사. 계층구조 3- 형제
      - 선택자 + 형제 
      - 인접한 바로 뒤의 형제요소 반환
      예>
         #xxx + p{

	 }
   아. 계층구조 4- 형제들
      - 선택자 ~ 형제들 
      - 인접한 요소 뒤의 모든 형제요소 반환
      예>
         #xxx ~ p{

	 }

   자. 속성으로 찾기
      - 특정속성으로 구성된 요소를 찾을 때 사용됨.
        예> <a href="http://www.daum.net">다음</a>
	   <a href="https://www.naver.com">네이버</a>
	   <a href="https://www.navercloud.com">네이버</a>
           <link href="" >
      a. 속성명으로 찾기
        - [속성명] 표현식, 태그명[속성명]
	예>   a[href]{

	     }