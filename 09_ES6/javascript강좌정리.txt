

* 웹 어플리케이션 개발 ( 웹사이트 )

 1. web application
   
   - 화면 필요 ( html, JSP/Servlet)
   

     브라우저 ------------------------> 서버 ( html, JSP/Servlet, Spring Framework, Spring Boot )
            <--------------------------
	      응답: html


2. REST API
             -----------------------> 서버 ( Spring Framework, Spring Boot )
     장치      <----------------------
	        JSON ( JavaScript Object Notation)
		{key:value, key:value}
    

3. full stack 어플리케이션 ( 화면 + REST API)

      React.js(JS)  ------------------------> 서버 ( Spring Framework, Spring Boot )
                  <--------------------------
	          응답: JSON


4. MSA ( Micro Service Application)

###########################################################################
###########################################################################
1장. JS 개요
###########################################################################
1. (Vanilla) Javascript(JS) 개요

  - Java 언어와 무관
  - 웹브라우저에서 실행됨 ( JS 엔진 )
    크롬의 JS 엔진: v8
    html 랜더링 기능: 랜더링 엔진

  - V8엔진을 크롬 브라우저뿐만 아니라 일반 서버에서도 실행될 수 있도록 만듬.
    ==> node.js


     클라이언트                           서버
     (크롬브라우저:V8)                 (node.js:V8)

  - JS 라이브러리
    ==> jQuery

  - JS 프레임워크 (프런트 앤드 기술 )
    => React.js (*, 페이스북)
    => Vue.js   ( 중국계 미국인 )
    => Angular  ( 구글 )

  - React 종류 3가지

    가. React.js
       - CSR ( Client Side Rendering )

    나. Next.js
       - SSR ( Server Side Rendering )

    다. React Native
      - 모바일 용

  - JS 표준화 ==> ES6 ( ECMAScript 6: 2015 년 )
    일반적인 JS는 ES5 의미한다.

  - TypeScript (******)
     JS + 타입지정 ==> 개발향상 기대
     
 
2. JS 특징
  - 인터프리터 언어 ( 컴파일 없이 한줄 씩 실행 )
  - 대소문자 구별함.
  - JS 엔진에서 실행.
  - html 태그에 포함되어 정의함.
   
    가. <head> 태그안에 JS 정의가능
       - <script> 태그 이용

    나. <body> 태그안에 JS 정의가능
       - <script> 태그 이용

  - 주석문은 자바와 동일 ( //, /*~*/ )

###########################################################################
###########################################################################
2장. 식별자와 데이터 종류
###########################################################################
1. 식별자 (identifier)
  - JS 문법에 지정하는 영단어.
  - 대소문자 구별
  - 첫글자는 반드시 영문자 또는 _ 또는 $ 만 가능.
    이후에 숫자지정 가능.
  - 자바와 비슷하게 시스템 정의 식별자(예약어,키워드) 와 사용자 정의 식별자가 있음.

2. 데이터 종류 ( 외우기 )

  가. 기본 데이터형

      - 수치데이터: 정수와 실수 포함
      - 문자데이터: 문자와 문자열 포함
                 예> '홍길동', "홍길동"
      - 논리데이터: true/false ( 일반데이터도 boolean 값으로 처리 가능 ) - **********

      - undefined : 변수 초기화 안된 상태 의미. (*****)
      - null      : 초기화는 되었는데 값(객체)없음 의미.
      - NaN       : Not a Number
                  예>  Number.parseInt("홍길동"); ==> NaN 발생
       
                  자바:  Integer.parseInt("123");  ==> 123
		        Integer.parseInt("홍길동"); ==> 에러

  나. 참조 데이터형 ( 객체 데이터 의미 )

     - 배열(객체): [값, 값2, ..]
     - JSON(객체): {key:value, key:value}
     - 함수(function): 기능처리 (*************)
                    예> function fun(){}
       ==> 함수가 데이터란 의미는 함수를 변수에 저장할 수 있음을 의미한다.
     - 클래스(class):   class Cat{
                         생성자
			 메서드(함수문법)
			 function fun(){}
                      }
      

3. typeof 연산자

 - 데이터 타입을 알 수 있음.
 - 반환값은 문자열로 반환.

 - 문법:  typeof 값

###########################################################################
###########################################################################
3장. 변수와 상수
###########################################################################

1. 변수 용도
  - 데이터 저장

2. 변수 특징
  - 데이터형을 지정하지 않는다. (******)
    변수에 저장되는 데이터 종류(데이터타입)을 제한안함.
    즉 하나의 변수에 모든 데이터를 저장할 수 있음.


3. 문법

  가.  var 키워드 이용 ( OLD 방법 )
    
     - var 변수명; // 변수선언, undefined 값이 저장됨.
       변수명=값;  // 변수초기화
  
     - var 변수명=값;
     - 특징:
        변수명 중복가능.
	함수 스코프를 따른다. ( 함수(function)가 아닌 {} 에서는 외부에서도 사용 가능 )
	예> 
	     if(true){
               var n = 10;
	     }
	     console.log(n);  // 사용가능

	     function fun(){
                var n2 = 10;
	     }
	     console.log(n2);  // 사용 불가능

  나.  let 키워드 이용 ( ES6 지원 )

      - let 변수명;  // 변수선언 , undefined 값이 저장됨.
        변수명=값;   // 변수초기화
  
      - let 변수명=값;
      - 특징:
        변수명 중복 불가능.
	블럭 스코프를 따른다.

        예> 
	     if(true){
               let n = 10;
	     }
	     console.log(n);  // 사용 불가능

	     function fun(){
                let n2 = 10;
	     }
	     console.log(n2);  // 사용 불가능

 
4. 데이터 형변환

  1) + 를 제외한 나머지 산술연산자 ( -, *, / , % )는
    문자열이 자동으로 수치로 형변환되어 연산됨.
     + 는 연결처리됨.


  2) 일반 데이터가 boolean 로 처리 (********************)

     - false로 처리되는 일반 데이터
	
	 0
	 "" (빈문자열)
	 undefined
	 null
	 NaN

     - true로 처리되는 일반 데이터
       ==> 위의 false로 처리되는 5가지 제외한 나머지 모두 true로 처리됨.

      //JS에서 가능한 표현식
      if(10){
        console.log("10은 true");
      }
   